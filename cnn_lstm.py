# -*- coding: utf-8 -*-
"""Copy of cnn_lstm.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1S_lvLBLM7GF5XBJc06rDRyphNzlJ6vF5
"""

from google.colab import drive
drive.mount('/content/drive')

# Image processing
import cv2
import pandas as pd
#from skimage.transform import rescale, resize, downscale_local_mean

# Charts
import matplotlib.pyplot as plt
import seaborn as sns

# ML, statistics
import scipy
from sklearn.model_selection import train_test_split
from sklearn import metrics

# Tensorflow
#from sklearn.preprocessing import OneHotEncoder
import tensorflow
from tensorflow import keras
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.layers import Conv2D, MaxPooling2D
from tensorflow.keras.layers import Dense, Dropout, Flatten, Activation
from tensorflow.keras.models import Sequential
from tensorflow.keras.callbacks import EarlyStopping, ReduceLROnPlateau, ModelCheckpoint
from tensorflow.keras.optimizers import Adam

df_main = pd.read_csv("/content/drive/MyDrive/CSGO BOT/AIM_TRAIN_FOR_TRAIN_BY_US/all_csv/all_50_csv.csv")

df = df_main[:42376]

df.columns = ['frameName', 'label']

df.head()

df['label'].unique()

cleanup_nums = {"label": {"50:0": "x1", "-50:0": "x2", "40:0": "x3", "-40:0": "x4" ,"30:0":"x5"}}  
df = df.replace(cleanup_nums) 
df.head(20)

df.label.value_counts().plot(kind='bar')
plt.title('Labels counts')
plt.xlabel('Label')
plt.ylabel('Count')
plt.show()

train_df, test_df = train_test_split(df, test_size = 0.2, random_state = 0)

batch_size = 64
target_size = (80, 180)

datagen = ImageDataGenerator(rescale=1./255., validation_split= 0.3)

train_generator = datagen.flow_from_dataframe(dataframe= train_df,
            directory="/content/drive/MyDrive/CSGO BOT/AIM_TRAIN_FOR_TRAIN_BY_US/all_50_frames/all_frames/",
            x_col="frameName",
            y_col="label",
            subset="training",
            batch_size=batch_size,
            #seed= 42,
            class_mode="categorical",
            target_size=target_size)

val_generator = datagen.flow_from_dataframe(dataframe= train_df,
            directory="/content/drive/MyDrive/CSGO BOT/AIM_TRAIN_FOR_TRAIN_BY_US/all_50_frames/all_frames/",
            x_col="frameName",
            y_col="label",
            #has_ext=False,
            subset="validation",
            batch_size=batch_size,
            #seed=42,
            shuffle=True,
            class_mode="categorical",
            target_size=target_size)    
print('Validation generator created')

import os
import cv2
import glob
import pickle
import numpy as np
import tensorflow 
import tensorflow as tf
from imutils import paths
from tensorflow import keras
from tensorflow.keras import layers
import matplotlib.pyplot as plt
from sklearn import preprocessing
from sklearn.preprocessing import LabelBinarizer
from tensorflow.keras.models import Model, Sequential
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report
from tensorflow.keras.applications import ResNet50
from tensorflow.keras.layers import Input, Add, Dense,GlobalAvgPool2D, Concatenate, AvgPool2D, Dropout, ReLU, Activation, MaxPool2D, ZeroPadding2D, BatchNormalization, Flatten, Conv2D, GlobalAveragePooling2D, AveragePooling2D, MaxPooling2D, GlobalMaxPooling2D
from tensorflow.keras.optimizers import RMSprop, Adam, SGD
from tensorflow.keras.layers import GlobalAveragePooling2D, Dense, Reshape, Lambda, LSTM
from sklearn.model_selection import train_test_split
from tensorflow.keras.utils import to_categorical

from tensorflow.keras.applications import EfficientNetB0

# model = tensorflow.keras.models.Sequential()
# model.add(layers.Conv2D(32, (3,3), input_shape = (80, 180, 3), activation = 'relu'))
# model.add(layers.MaxPooling2D(pool_size = (2,2)))
# model.add(layers.Dropout(0.05))
# model.add(layers.BatchNormalization())
# model.add(layers.Conv2D(256, (3,3), activation = 'relu'))
# model.add(layers.MaxPooling2D(pool_size = (2,2)))
# model.add(layers.Dropout(0.07))
# model.add(tf.keras.layers.BatchNormalization())
# model.add(layers.Conv2D(256, (3,3), activation = 'relu'))
# model.add(layers.MaxPooling2D(pool_size=(2,2)))
# model.add(layers.Dropout(0.15))
# model.add(tf.keras.layers.BatchNormalization())
# model.add(layers.Flatten())
# model.add(layers.Dense(128,activation = 'relu'))
# model.add(layers.Dropout(0.4))
# model.add(layers.Dense(11, activation = 'softmax'))

in_shape = (80, 180, 3)


base_model = EfficientNetB0(weights = 'imagenet', input_shape = (80, 180, 3), include_top = False, drop_connect_rate = 0.4)

x= base_model.layers[-3].output
x= GlobalAveragePooling2D()(x)
x= BatchNormalization()(x)
x= Flatten()(x)
x= Dense(128,activation='relu')(x) 
x= Dense(64,activation='relu')(x) 
x= Dense(32,activation='relu')(x) 
x= Dense(16,activation='relu')(x) 

predictions= Dense(10, activation = 'softmax')(x)
model= Model(inputs= base_model.input, outputs= predictions)

for layer in model.layers[:-20]:
    layer.trainable = False

model.summary()

checkpoint = tf.keras.callbacks.ModelCheckpoint('/content/drive/MyDrive/CSGO BOT/checkpoint/model-{epoch:03d}-{acc:03f}-{val_acc:03f}.h5', verbose=1, monitor='val_loss', save_best_only=True, mode='auto')

model.compile(optimizer= Adam(learning_rate= 0.0001), loss='categorical_crossentropy', metrics=['acc'])













history = model.fit(train_generator, epochs= 10,
                        validation_data= val_generator,
                        callbacks= [checkpoint],
                        batch_size = 64)







# function ClickConnect(){
#     console.log("Clicked on connect button"); 
#     document.querySelector("colab-toolbar-button#toolbar-add-code").click()
# }
# setInterval(ClickConnect,60000)

# flatten (Flatten)              (None, 1280)





from tensorflow.keras import datasets, layers, models

model2 = models.Model(inputs = model.input, outputs = model.get_layer('flatten').output)

trains = model2.predict(train_generator)

tests = model2.predict(val_generator)

trains.shape

tests.shape

n_steps = 1

temp = trains[:n_steps]

temp = temp.reshape(1,n_steps,temp.shape[1])

for i in range(n_steps,trains.shape[0],n_steps):

  temp = np.append(temp,trains[i:i+n_steps].reshape(1,n_steps,trains.shape[1]),axis = 0)
  
trainX = temp

trainX.shape

temp = tests[:n_steps]
temp = temp.reshape(1,temp.shape[0],temp.shape[1])
for i in range(n_steps,tests.shape[0],n_steps):
  temp = np.append(temp,tests[i:i+n_steps].reshape(1,n_steps,tests.shape[1]),axis = 0)
testX = temp

testX.shape

y_train = []

for i in train_generator.labels:
  print(i)
  y_train.append(i)

trainY = []

for i in range(0, 23719, 1):
  trainY.append(y_train[i])

trainY = np.array(trainY)
trainY.shape

y_test = []

for i in val_generator.labels:

  y_test.append(i)

testY = []
for i in range(0, 10170, 1):
  testY.append(y_test[i])

testY = np.array(testY)
testY.shape

from tensorflow.keras.utils import to_categorical
trainY = to_categorical(trainY, 10)
testY = to_categorical(testY, 10)

model2 = models.Sequential()
model2.add(layers.LSTM(1024, activation='relu', return_sequences=False, input_shape=(1, 1280)))
model2.add(layers.Dropout(0.15))
#model2.add(layers.LSTM(512, activation='relu'))
model2.add(layers.Dense(128, activation='relu'))
model2.add(layers.BatchNormalization())
model2.add(layers.Dense(64, activation='relu'))
model2.add(layers.Dense(32, activation='relu'))
model2.add(layers.Dropout(0.2))
model2.add(layers.Dense(10,activation="softmax"))

checkpoint = tf.keras.callbacks.ModelCheckpoint('/content/drive/MyDrive/CSGO BOT/checkpoint/lstm/model-{epoch:03d}-{acc:03f}-{val_acc:03f}.h5', verbose=1, monitor='val_loss', save_best_only=True, mode='auto')

model2.summary()

model2.compile(optimizer= Adam(learning_rate= 0.00001), loss='categorical_crossentropy', metrics=['acc'])

history = model2.fit(trainX, trainY, validation_data = (testX, testY), batch_size= 16, callbacks= [checkpoint], epochs= 10)

model2.save("ef_lstm.h5")